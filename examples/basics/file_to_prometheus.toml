# Prometheus sink example
# ------------------------------------------------------------------------------
# Parsing logs as metrics and exposing into Prometheus
data_dir = "/var/lib/vector"

# Ingest
[sources.file]
type = "file"
include = ["sample.log"]
start_at_beginning = true

# Structure and parse the data
[transforms.regex_parser]
inputs = ["file"]
type = "remap"
source = ". |= parse_regex!(.message, r'^(?P<host>[\\w\\.]+) - (?P<user>[\\w-]+) \\[(?P<timestamp>.*)\\] \"(?P<method>[\\w]+) (?P<path>.*)\" (?P<status>[\\d]+) (?P<bytes_out>[\\d]+)$'),\n"
drop_on_error = false

# Transform into metrics
[transforms.log_to_metric]
inputs = ["regex_parser"]
type = "log_to_metric"

[[transforms.log_to_metric.metrics]]
type = "counter"
field = "message"

[[transforms.log_to_metric.metrics]]
type = "counter"
increment_by_value = true
field = "bytes_out"
name = "bytes_out_total"

[[transforms.log_to_metric.metrics]]
type = "gauge"
field = "bytes_out"

[[transforms.log_to_metric.metrics]]
type = "set"
field = "user"

[[transforms.log_to_metric.metrics]]
type = "histogram"
field = "bytes_out"
name = "bytes_out_histogram"

# Output data
[sinks.console_metrics]
inputs = ["log_to_metric"]
type = "console"

[sinks.console_metrics.encoding]
codec = "json"

[sinks.console_logs]
inputs = ["regex_parser"]
type = "console"

[sinks.console_logs.encoding]
codec = "text"

[sinks.prometheus]
inputs = ["log_to_metric"]
type = "prometheus_exporter"
default_namespace = "vector"
buckets = [0.0, 10.0, 100.0, 1000.0, 10000.0, 100001.0]
